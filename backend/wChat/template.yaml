AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  wChat

  Sample SAM Template for wChat

Globals:
  Function:
    Timeout: 10
    Environment:
      Variables:
        DB_HOST: 34.31.238.119
        USERS_DB_NAME: users-wchat
        SMS_DB_NAME: sms-wchat
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        JWT_SECRET: ILoveMyself
        WEBSOCKET_API_DOMAIN: 
          Fn::Sub: "${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com"
        WEBSOCKET_API_STAGE: Prod
        MY_AWS_REGION: !Ref "AWS::Region"
        SENDER_EMAIL: zachariahjhansen@gmail.com
        AuthorizerResultTtlInSeconds: 0  # This disables caching
        # EMAIL_FUNCTION_NAME: !Ref EmailFunction
    MemorySize: 128
    LoggingConfig:
      LogFormat: JSON

Resources:
  # Layers
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dependencies-layer
      Description: Dependencies for the Lambda function
      ContentUri: ./
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12

  AuthLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: auth-layer
      Description: Layer for the Authentication
      ContentUri: functions/auth_layer/
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12

# WEBSOCKETS
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebSocketAPI
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
    
    
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
      RouteResponseSelectionExpression: $default

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref WebSocketApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebSocketApi

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/websockets/
      Handler: connect.lambda_handler
      Runtime: python3.12
      Layers:
        - !Ref DependenciesLayer

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/websockets/
      Handler: disconnect.lambda_handler
      Runtime: python3.12
      Layers:
        - !Ref DependenciesLayer

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  BroadcastFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/websockets/
      Handler: broadcast.lambda_handler
      Runtime: python3.12
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'
      Layers:
        - !Ref DependenciesLayer


# FUNCTIONS

  EmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: email_service.lambda_handler
      Runtime: python3.12
      CodeUri: functions/_email/
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'ses:SendEmail'
                - 'ses:SendRawEmail'
                - 'ses:VerifyEmailIdentity'  
                - 'ses:GetIdentityVerificationAttributes'  
              Resource: '*'
      Environment:
        Variables:
          MY_AWS_REGION: !Ref "AWS::Region"
          SENDER_EMAIL: zachariahjhansen@gmail.com
          APP_URL: https://zachariahhansen.com/
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  AvailabilityFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: availability_functions.lambda_handler
      Runtime: python3.12
      CodeUri: functions/availability/
      Events:
        GetAvailability:
          Type: Api
          Properties:
            Path: /availability/{id}
            Method: get
        CreateAvailability:
          Type: Api
          Properties:
            Path: /availability/{id}
            Method: post
        UpdateAvailability:
          Type: Api
          Properties:
            Path: /availability/{id}
            Method: put
        DeleteAvailability:
          Type: Api
          Properties:
            Path: /availability/{id}
            Method: delete
        OptionsAvailabilityId:
          Type: Api
          Properties:
            Path: /availability/{id}
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  TimeOffFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: time_off_functions.lambda_handler
      Runtime: python3.12
      CodeUri: functions/availability/
      Events:
        GetAllTimeOff:
          Type: Api
          Properties:
            Path: /time-off
            Method: get
        OptionsTimeOff:
          Type: Api
          Properties:
            Path: /time-off
            Method: options
        GetTimeOff:
          Type: Api
          Properties:
            Path: /time-off/{id}
            Method: get
        CreateTimeOff:
          Type: Api
          Properties:
            Path: /time-off/{id}
            Method: post
        UpdateTimeOff:
          Type: Api
          Properties:
            Path: /time-off/{id}
            Method: put
        DeleteTimeOff:
          Type: Api
          Properties:
            Path: /time-off/{id}
            Method: delete
        OptionsTimeOffId:
          Type: Api
          Properties:
            Path: /time-off/{id}
            Method: options
      Layers:

  DepartmentFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: department_functions.lambda_handler
      Runtime: python3.12
      CodeUri: functions/department/
      Events:
        GetDepartment:
          Type: Api
          Properties:
            Path: /departments/{id}
            Method: get
        CreateDepartment:
          Type: Api
          Properties:
            Path: /departments
            Method: post
        UpdateDepartment:
          Type: Api
          Properties:
            Path: /departments/{id}
            Method: put
        DeleteDepartment:
          Type: Api
          Properties:
            Path: /departments/{id}
            Method: delete
        OptionsDepartment:
          Type: Api
          Properties:
            Path: /departments
            Method: options
        OptionsDepartmentId:
          Type: Api
          Properties:
            Path: /departments/{id}
            Method: optionss
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  AllDepartmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: all_departments.lambda_handler
      Runtime: python3.12
      CodeUri: functions/department/
      Events:
        GetAllDepartments:
          Type: Api
          Properties:
            Path: /departments/all
            Method: get
        OptionsDepartments:
          Type: Api
          Properties:
            Path: /departments/all
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  AssignDepartmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: assign_department.lambda_handler
      Runtime: python3.12
      CodeUri: functions/department/
      Events:
        AssignUserDepartment:
          Type: Api
          Properties:
            Path: /assign-department
            Method: post
        RemoveUserDepartment:
          Type: Api
          Properties:
            Path: /assign-department/{department_id}/user/{user_id}
            Method: delete
        OptionsAssignDepartment:
          Type: Api
          Properties:
            Path: /assign-department
            Method: options
        OptionsRemoveUserDepartment:
          Type: Api
          Properties:
            Path: /assign-department/{department_id}/user/{user_id}
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  RoleFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: role_functions.lambda_handler
      Runtime: python3.12
      CodeUri: functions/role/
      Events:
        GetRole:
          Type: Api
          Properties:
            Path: /roles/{id}
            Method: get
        CreateRole:
          Type: Api
          Properties:
            Path: /roles
            Method: post
        UpdateRole:
          Type: Api
          Properties:
            Path: /roles/{id}
            Method: put
        DeleteRole:
          Type: Api
          Properties:
            Path: /roles/{id}
            Method: delete
        OptionsRole:
          Type: Api
          Properties:
            Path: /roles
            Method: options
        OptionsRoleId:
          Type: Api
          Properties:
            Path: /roles/{id}
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  AllRolesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: all_roles.lambda_handler
      Runtime: python3.12
      CodeUri: functions/role/
      Events:
        GetAllRoles:
          Type: Api
          Properties:
            Path: /roles/all
            Method: get
        OptionsRoles:
          Type: Api
          Properties:
            Path: /roles/all
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  UpdateUserRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update_user_role.lambda_handler
      Runtime: python3.12
      CodeUri: functions/user/
      Events:
        UpdateUserRole:
          Type: Api
          Properties:
            Path: /users/{id}/role
            Method: put
        OptionsUserRole:
          Type: Api
          Properties:
            Path: /users/{id}/role
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  UserFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: user_functions.lambda_handler
      Runtime: python3.12
      CodeUri: functions/user/
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: get
        CreateUser:
          Type: Api
          Properties:
            Path: /users/register
            Method: post
        UpdateUser:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: put
        DeleteUser:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: delete
        OptionsRegister:
          Type: Api
          Properties:
            Path: /users/register
            Method: options
        OptionsUserId:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: options
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
              Resource: !GetAtt EmailFunction.Arn
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
      Environment:
        Variables:
          EMAIL_FUNCTION_NAME: !Ref EmailFunction
          LAMBDA_REGION: !Ref "AWS::Region"  # Add this to ensure boto3 client uses correct region
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  GetAllUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: all_users.lambda_handler
      Runtime: python3.12
      CodeUri: functions/user/
      Events:
        GetAllUsers:
          Type: Api
          Properties:
            Path: /users/all
            Method: get
        OptionsAllUsers:
          Type: Api
          Properties:
            Path: /users/all
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  UpdatePasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update_password.lambda_handler
      Runtime: python3.12
      CodeUri: functions/user/
      Events:
        UpdatePassword:
          Type: Api
          Properties:
            Path: /users/{id}/password
            Method: put
        OptionsPassword:
          Type: Api
          Properties:
            Path: /users/{id}/password
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  LoginFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: login.lambda_handler
      Runtime: python3.12
      CodeUri: functions/user/
      Events:
        Login:
          Type: Api
          Properties:
            Path: /users/login
            Method: post
        OptionsLogin:
          Type: Api
          Properties:
            Path: /users/login
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  ShiftFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: shift_functions.lambda_handler
      Runtime: python3.12
      CodeUri: functions/shift/
      Events:
        GetShift:
          Type: Api
          Properties:
            Path: /shifts/{id}
            Method: get
        CreateShift:
          Type: Api
          Properties:
            Path: /shifts
            Method: post
        UpdateShift:
          Type: Api
          Properties:
            Path: /shifts/{id}
            Method: put
        DeleteShift:
          Type: Api
          Properties:
            Path: /shifts/{id}
            Method: delete
        OptionsShift:
          Type: Api
          Properties:
            Path: /shifts
            Method: options
        OptionsShiftId:
          Type: Api
          Properties:
            Path: /shifts/{id}
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  GetAllShiftsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: all_shifts.lambda_handler
      Runtime: python3.12
      CodeUri: functions/shift/
      Events:
        GetAllShifts:
          Type: Api
          Properties:
            Path: /shifts/all
            Method: get
        OptionsGetAllShifts:
          Type: Api
          Properties:
            Path: /shifts/all
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  ShiftsUserFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: user_shifts.lambda_handler
      Runtime: python3.12
      CodeUri: functions/shift/
      Events:
        GetShiftsUser:
          Type: Api
          Properties:
            Path: /shifts/user/{id}
            Method: get
        OptionsShiftsUser:
          Type: Api
          Properties:
            Path: /shifts/user/{id}
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  ShiftsDepartmentFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: department_available_shifts.lambda_handler
      Runtime: python3.12
      CodeUri: functions/shift/
      Events:
        GetShiftsDepartment:
          Type: Api
          Properties:
            Path: /shifts/department/{id}
            Method: get
        OptionsShiftsDepartment:
          Type: Api
          Properties:
            Path: /shifts/department/{id}
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  NextShiftFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: next_shift.lambda_handler
      Runtime: python3.12
      CodeUri: functions/shift/
      Events:
        GetNextShift:
          Type: Api
          Properties:
            Path: /shifts/next/{id}
            Method: get
        OptionsNextShift:
          Type: Api
          Properties:
            Path: /shifts/next/{id}
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  ShiftExchangeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: shift_exchange.lambda_handler
      Runtime: python3.12
      CodeUri: functions/shift/
      Events:
        ShiftRelinquish:
          Type: Api
          Properties:
            Path: /shift-exchange/relinquish
            Method: post
        ShiftPickup:
          Type: Api
          Properties:
            Path: /shift-exchange/pickup
            Method: post
        GetAvailableShifts:
          Type: Api
          Properties:
            Path: /shift-exchange
            Method: get
        OptionsShiftExchange:
          Type: Api
          Properties:
            Path: /shift-exchange
            Method: options
        OptionsShiftRelinquish:
          Type: Api
          Properties:
            Path: /shift-exchange/relinquish
            Method: options
        OptionsShiftPickup:
          Type: Api
          Properties:
            Path: /shift-exchange/pickup
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  AssignShiftFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: assign_shift.lambda_handler
      Runtime: python3.12
      CodeUri: functions/shift/
      Events:
        AssignShift:
          Type: Api
          Properties:
            Path: /shifts/assign
            Method: put
        OptionsAssignShift:
          Type: Api
          Properties:
            Path: /shifts/assign
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  UnassignShiftFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: unassign_shift.lambda_handler
      Runtime: python3.12
      CodeUri: functions/shift/
      Events:
        UnassignShift:
          Type: Api
          Properties:
            Path: /shifts/unassign
            Method: put
        OptionsUnassignShift:
          Type: Api
          Properties:
            Path: /shifts/unassign
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer  

  MessageFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: message_functions.lambda_handler
      Runtime: python3.12
      CodeUri: functions/message/
      Events:
        GetMessage:
          Type: Api
          Properties:
            Path: /messages/{id}
            Method: get
        CreateMessage:
          Type: Api
          Properties:
            Path: /messages
            Method: post
        UpdateMessage:
          Type: Api
          Properties:
            Path: /messages/{id}
            Method: put
        DeleteMessage:
          Type: Api
          Properties:
            Path: /messages/{id}
            Method: delete
        OptionsMessage:
          Type: Api
          Properties:
            Path: /messages
            Method: options
        OptionsMessageId:
          Type: Api
          Properties:
            Path: /messages/{id}
            Method: options
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer
      
  ConversationListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: conversation_list.lambda_handler
      Runtime: python3.12
      CodeUri: functions/message/
      Events:
        GetConversations:
          Type: Api
          Properties:
            Path: /messages/conversations
            Method: get
        OptionsConversations:
          Type: Api
          Properties:
            Path: /messages/conversations
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

# First, add this new API definition
  ProfilePictureApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      BinaryMediaTypes:
        - image/jpeg
        - image/png
        - '*/*'

# Then modify the ProfilePictureFunctions resource
  ProfilePictureFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: pfp.lambda_handler
      Runtime: python3.12
      CodeUri: functions/user/
      Events:
        GetProfilePicture:
          Type: Api
          Properties:
            Path: /users/{id}/profile-picture
            Method: get
            RestApiId: !Ref ProfilePictureApi
        UpdateProfilePicture:
          Type: Api
          Properties:
            Path: /users/{id}/profile-picture
            Method: put
            RestApiId: !Ref ProfilePictureApi
        DeleteProfilePicture:
          Type: Api
          Properties:
            Path: /users/{id}/profile-picture
            Method: delete
            RestApiId: !Ref ProfilePictureApi
        OptionsProfilePicture:
          Type: Api
          Properties:
            Path: /users/{id}/profile-picture
            Method: options
            RestApiId: !Ref ProfilePictureApi
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  UserApi:
    Description: "API Gateway endpoint URL for Prod stage for User functions"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/users/"
  WebSocketApi:
    Description: "API Gateway endpoint URL for Prod stage for Websockets"
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  ProfilePictureApi:
    Description: "API Gateway endpoint URL for Prod stage for Profile Picture API"
    Value: !Sub "https://${ProfilePictureApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
