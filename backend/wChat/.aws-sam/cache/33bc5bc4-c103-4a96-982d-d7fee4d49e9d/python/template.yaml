AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  wChat

  Sample SAM Template for wChat

# Parameters:
  # ExampleApiKey:
  #   Type: String
  #   Description: API Key for the example API
  #   Default: '123456789012345678901234567890'
  #   MinLength: 20
  #   MaxLength: 40
  #   AllowedPattern: '[a-zA-Z0-9]+'
  #   ConstraintDescription: must be a string of 20 to 40 alphanumeric characters.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    Environment:
      Variables:
        DB_HOST: 34.31.238.119
        USERS_DB_NAME: users-wchat
        SMS_DB_NAME: sms-wchat
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        JWT_SECRET: ILoveMyself
    MemorySize: 128

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
Resources:

  # Layers
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dependencies-layer
      Description: Dependencies for the Lambda function
      ContentUri: ./
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12

  AuthLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: auth-layer
      Description: Layer for the Authentication
      ContentUri: functions/auth_layer/
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12


# FUNCTIONS

  DepartmentFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: department_functions.lambda_handler
      Runtime: python3.12
      CodeUri: functions/department/
      Events:
        GetDepartment:
          Type: Api
          Properties:
            Path: /departments/{id}
            Method: get
        CreateDepartment:
          Type: Api
          Properties:
            Path: /departments
            Method: post
        UpdateDepartment:
          Type: Api
          Properties:
            Path: /departments/{id}
            Method: put
        DeleteDepartment:
          Type: Api
          Properties:
            Path: /departments/{id}
            Method: delete
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  RoleFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: role_functions.lambda_handler
      Runtime: python3.12
      CodeUri: functions/role/
      Events:
        GetRole:
          Type: Api
          Properties:
            Path: /roles/{id}
            Method: get
        CreateRole:
          Type: Api
          Properties:
            Path: /roles
            Method: post
        UpdateRole:
          Type: Api
          Properties:
            Path: /roles/{id}
            Method: put
        DeleteRole:
          Type: Api
          Properties:
            Path: /roles/{id}
            Method: delete
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  UserFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: user_functions.lambda_handler
      Runtime: python3.12
      CodeUri: functions/user/
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: get
        CreateUser:
          Type: Api
          Properties:
            Path: /users/register
            Method: post
        UpdateUser:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: put
        DeleteUser:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: delete
        OptionsRegister:
          Type: Api
          Properties:
            Path: /users/register
            Method: options
        OptionsUserId:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  GetAllUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: all_users.lambda_handler
      Runtime: python3.12
      CodeUri: functions/user/
      Events:
        GetAllUsers:
          Type: Api
          Properties:
            Path: /users/all
            Method: get
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  LoginFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: login.lambda_handler
      Runtime: python3.12
      CodeUri: functions/user/
      Events:
        Login:
          Type: Api
          Properties:
            Path: /users/login
            Method: post
        OptionsLogin:
          Type: Api
          Properties:
            Path: /users/login
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  ShiftFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: shift_functions.lambda_handler
      Runtime: python3.12
      CodeUri: functions/shift/
      Events:
        GetShift:
          Type: Api
          Properties:
            Path: /shifts/{id}
            Method: get
        CreateShift:
          Type: Api
          Properties:
            Path: /shifts
            Method: post
        UpdateShift:
          Type: Api
          Properties:
            Path: /shifts/{id}
            Method: put
        DeleteShift:
          Type: Api
          Properties:
            Path: /shifts/{id}
            Method: delete
        OptionsShift:
          Type: Api
          Properties:
            Path: /shifts
            Method: options
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  ShiftsUserFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: user_shifts.lambda_handler
      Runtime: python3.12
      CodeUri: functions/shift/
      Events:
        GetShiftsUser:
          Type: Api
          Properties:
            Path: /shifts/user/{id}
            Method: get
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  ShiftsDepartmentFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: department_available_shifts.lambda_handler
      Runtime: python3.12
      CodeUri: functions/shift/
      Events:
        GetShiftsDepartment:
          Type: Api
          Properties:
            Path: /shifts/department/{id}
            Method: get
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  NextShiftFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: next_shift.lambda_handler
      Runtime: python3.12
      CodeUri: functions/shift/
      Events:
        GetNextShift:
          Type: Api
          Properties:
            Path: /shifts/next/{id}
            Method: get
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  AssignShiftFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: assign_shift.lambda_handler
      Runtime: python3.12
      CodeUri: functions/shift/
      Events:
        AssignShift:
          Type: Api
          Properties:
            Path: /shifts/assign
            Method: put
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer  

  MessageFunctions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: message_functions.lambda_handler
      Runtime: python3.12
      CodeUri: functions/message/
      Events:
        GetMessage:
          Type: Api
          Properties:
            Path: /messages/{id}
            Method: get
        CreateMessage:
          Type: Api
          Properties:
            Path: /messages
            Method: post
        UpdateMessage:
          Type: Api
          Properties:
            Path: /messages/{id}
            Method: put
        DeleteMessage:
          Type: Api
          Properties:
            Path: /messages/{id}
            Method: delete
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer
      
  ConversationListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: conversation_list.lambda_handler
      Runtime: python3.12
      CodeUri: functions/message/
      Events:
        GetConversations:
          Type: Api
          Properties:
            Path: /messages/conversations
            Method: get
      Layers:
        - !Ref DependenciesLayer
        - !Ref AuthLayer

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
   UserApi:
    Description: "API Gateway endpoint URL for Prod stage for User functions"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/users/"
